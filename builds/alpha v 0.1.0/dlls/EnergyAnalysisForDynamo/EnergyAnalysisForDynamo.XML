<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EnergyAnalysisForDynamo</name>
    </assembly>
    <members>
	    <member name="M:EnergyAnalysisForDynamo.EnergySettings.GetEnergySettings">
            <summary>
            Gets existing Energy Data Settings from current document
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.EnergySettings.SetEnergySettings(System.String,System.Double,System.Double,System.String,System.String)">
            <summary>
            Sets the Enegry Data Settings
            </summary>
            <param name="BldgTyp"> Input Building Type </param>
            <param name="GlzPer">Input glazing percentage (range: 0 to 1) </param>
            <param name="ShadeDepth">Shading Depth, specified as a double.  We assume the double value represents a length using Dynamo's current length unit.</param>
            <param name="HVACsys">Input Building HVAC system</param>
            <param name="OSchedule">Input Building Operating Schedule</param>
            <returns></returns>
        </member>
        <member name="T:EnergyAnalysisForDynamo.PrepareEnergyModel">
            <summary>
            Contains Dynamo nodes that deal with a Revit model's Analysis zones and surfaces
            </summary>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.AnalysisSurfacePoint(EnergyAnalysisForDynamo.ElementId)">
            <summary>
            Draws a point around the center of an analysis surface.  Useful for sorting/grouping surfaces upstream of a SetSurfaceParameters node.
            </summary>
            <param name="SurfaceId">The ElementId of the surface to create a point from.  Get this from the AnalysisZones > CreateFrom* > SurfaceIds output list</param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.AnalysisSurfaceVector(EnergyAnalysisForDynamo.ElementId)">
            <summary>
            Returns a vector represnting the normal of an analysis surface.  Useful for sorting/grouping surfaces upstream of a SetSurfaceParameters node.
            </summary>
            <param name="SurfaceId">The ElementId of the surface to create a vector from.  Get this from AnalysisZones > CreateFrom* > SurfaceIds output list</param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.CreateEnergyModelFromMassAndLevels(Revit.Elements.AbstractFamilyInstance,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Creates mass floors and analysis zones from a [conceptual mass] family instance and a list of levels.
            </summary>
            <param name="MassFamilyInstance">The conceptual mass family instance to create zones from</param>
            <param name="Levels">A list of levels to create mass floors with</param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.CreateEnergyModelFromMass(Revit.Elements.AbstractFamilyInstance)">
            <summary>
            Creates analysis zones from a [conceptual mass] family instance which already contains at least one mass floor.
            </summary>
            <param name="MassFamilyInstance">The conceptual mass family instance to create zones from</param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.DecomposeZone(EnergyAnalysisForDynamo.ElementId)">
            <summary>
            Exposes an analysis zone's properties, including the zone's exterior face element ids.
            </summary>
            <param name="ZoneId">The ElementId of the zone to inspect.  Get this from the PrepareEnergyModel > CreateFrom* > ZoneIds output list</param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.DrawAnalysisSurface(EnergyAnalysisForDynamo.ElementId)">
            <summary>
            Draws a mesh in Dynamo representing an analysis surface.  Useful when trying to identify a surface to modify.
            </summary>
            <param name="SurfaceId">The ElementId of the surface to draw.  Get this from AnalysisZones > CreateFrom* > SurfaceIds output list</param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.DrawAnalysisZone(EnergyAnalysisForDynamo.ElementId)">
            <summary>
            Draws an analysis zone in Dynamo.  Use this to identify which zone is which in the CreateFromMass/CreateFromMassAndLevels 'ZoneIds' output list.
            </summary>
            <param name="ZoneId">The ElementId of the zone to draw.  Get this from the AnalysisZones > CreateFrom* > ZoneIds output list</param>
            <returns>A list of Dynamo meshes for each zone.</returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.SetSurfaceParameters(EnergyAnalysisForDynamo.ElementId,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Sets an exterior surface's energy parameters
            </summary>
            <param name="SurfaceId">The ElementId of the surface to modify.  Get this from the AnalysisZones > CreateFrom* > SurfaceIds output list</param>
            <param name="glazingPercent">Percentage of glazed area.  Should be a double between 0.0 - 1.0</param>
            <param name="shadingDepth">Shading Depth, specified as a double.  We assume the double value represents a length using Dynamo's current length unit.</param>
            <param name="sillHeight">Target sill height, specified as a double.  We assume the double value represents a length using Dynamo's current length unit.</param>
            <param name="ConstType">Conceptual Construction Type.  Use the Conceptual Construction Types Dropdown node from our EnergySettings tab to specify a value.</param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.SetZoneParameters(EnergyAnalysisForDynamo.ElementId,System.String,System.String)">
            <summary>
            Sets an analysis zone's energy parameters
            </summary>
            <param name="ZoneId">The ElementId of the zone to modify.  Get this from the AnalysisZones > CreateFrom* > ZoneIds output list</param>
            <param name="SpaceType">Sets the zone's space type.  Use the Space Types Dropdown node from our EnergySetting tab to specify a value.</param>
            <param name="ConditionType">Sets the zone's condition type.  Use the Condition Types Dropdown node from our EnergySetting tab to specify a value.</param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.GetAverageFaceHeight(Autodesk.Revit.DB.Face)">
            <summary>
            returns the average height of a face by averaging it's points' v values (for ruled faces - origin is returned fro planar faces.
            </summary>
            <param name="f">the face</param>
            <returns>average height of the face, or it's origin height</returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.GetPolygon(Autodesk.Revit.DB.EdgeArray)">
            <summary>
            get a list of points representing an edge array
            found on the building coder:
            http://thebuildingcoder.typepad.com/blog/2011/07/
            </summary>
            <param name="ea"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.PrepareEnergyModel.ActivateEnergyModel(Autodesk.Revit.DB.Document)">
            <summary>
            Activate the Energy Model in a Revit document
            </summary>
            <param name="RvtDoc">The project document to activate the energy model in</param>
        </member>		
        <member name="M:EnergyAnalysisForDynamo.Utilities.Helper._ExecuteMassRuns(System.Boolean,System.Int32)">
            <summary>
            Turn on and off MassRuns in project level
            </summary>
            <param name="Run"></param>
            <param name="ProjectId"></param>
            <returns></returns>
        </member>
        <member name="F:EnergyAnalysisForDynamo.Utilities.APIV1Uri.GetBuildingTypesUri">
            {buildingTypeId}/{latitude}/{longitude}
        </member>
        <member name="T:EnergyAnalysisForDynamo.ElementId">
            <summary>
            Wrapper class for Autodesk.Revit.DB.ElementId.
            </summary>
        </member>
        <member name="M:EnergyAnalysisForDynamo.ElementId.#ctor(System.Int32)">
            <summary>
            New ElementId instance with int input to set the Id
            </summary>
            <param name="id">The int representation of a Revit ElementId</param>
        </member>
        <member name="M:EnergyAnalysisForDynamo.ElementId.#ctor">
            <summary>
            Default constructor override
            </summary>
        </member>
        <member name="P:EnergyAnalysisForDynamo.ElementId.InternalId">
            <summary>
            The int representation of the [Revit] Element Id.
            </summary>
        </member>
        <member name="M:EnergyAnalysisForDynamo.RunAnalysis.CreateNewProject(System.String)">
            <summary>
            Creates new project in GBS Webservices, returns new Project ID
            </summary>
            <param name="ProjectTitle"> Title of the project </param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.RunAnalysis.ExportMassToGBXML(System.String,Revit.Elements.AbstractFamilyInstance,System.Boolean)">
            <summary> 
            Create gbXML file from Mass and saves to a local location 
            </summary>
            <param name="FilePath"> Specify the file path location to save gbXML file </param>
            <param name="MassFamilyInstance"> Input Mass Id </param>
            <param name="Run"> Set Boolean True. Default is false </param>
            <returns name="report"> Success? </returns>
            <returns name="gbXMLPath"></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.RunAnalysis.ExportZonesToGBXML(System.String,System.Collections.Generic.List{EnergyAnalysisForDynamo.ElementId},System.Boolean)">
            <summary>
            Exports gbXML file from Zones
            </summary>
            <param name="FilePath"> Specify the file path location to save gbXML file </param>
            <param name="ZoneIds"> Input Zone IDs</param>
            <param name="Run">Set Boolean True. Default is false </param>
            <returns name="report"> Success? </returns>
            <returns name="gbXMLPath"></returns>
        </member>
		<member name="M:EnergyAnalysisForDynamo.RunAnalysis.RunEnergyAnalysis(System.Int32,System.String,System.Boolean)">
            <summary>
            Creates Base Run and returns Base RunId
            </summary>
            <param name="ProjectId"> Input Project ID </param>
            <param name="gbXMLPath"> Input file path of gbXML File </param>
            <param name="ExecuteParametricRuns"> Set to true to execute parametric runs. You can read more about parametric runs here: http://autodesk.typepad.com/bpa/ </param>
            <returns></returns>
        </member>
		<member name="M:EnergyAnalysisForDynamo.GetAnalysisResults.GetProjectsList(System.Boolean)">
            <summary> 
            Returns Project Lists from GBS web service
            </summary> 
            <param name="Connect"> Set Boolean True </param>
            <returns name="ProjectIds"> Returns Project Ids in GBS Web Service List.</returns> 
            <returns name="ProjectTitles"> Returns Project Titles in GBS Web Service List.</returns> 
            <returns name="ProjectDateAdded"> Returns Project's date of added or created List.</returns> 
        </member>
        <member name="M:EnergyAnalysisForDynamo.GetAnalysisResults.GetRunIds(System.Int32)">
            <summary>
            Gets Run List of specific project from GBS Web Service
            </summary>
            <param name="ProjectId"> Input Project ID</param>
            <returns name = "RunIds"> Returns Run IDs </returns>
            <returns name = "ParametricRunIds"> Returns Alternate Run IDs </returns>
            <returns name = "RunNames"> Returns Run Names </returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.GetAnalysisResults.LoadAnalysisResults(System.Int32,System.Int32)">
            <summary>
            Loads analysis results from Green Building Studio for a specific project ID
            </summary>
            <para> Use .... nodes to parse the Results info of the specific run</para>
            <param name="RunID"> Input Run Id </param>
            <param name="ParametricRunID"> Input an Id for one of the parametric runs</param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.GetAnalysisResults.GetCarbonNeutralPotential(EnergyAnalysisForDynamo.DataContracts.RunResultSummary)">
            <summary>
            Gets Carbon Neutral Potential from the Results, The output is based on project location and won't change based on your design option
            </summary>
            <param name="Results"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.GetAnalysisResults.GetEnergyCarbonCostSummary(EnergyAnalysisForDynamo.DataContracts.RunResultSummary)">
            <summary>
            Gets Energy, Carbon Cost Summary
            </summary>
            <remarks> Estimated Energy and Cost Summary Assumptions:  </remarks>
            <remarks> 30-year life and 6.1 % discount rate for costs. Does not include electric transmission loses or renewable and natural ventilation potential.</remarks>
            <param name="Results"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.GetAnalysisResults.GetElectricPowerPlantSources(EnergyAnalysisForDynamo.DataContracts.RunResultSummary)">
            <summary>
            Gets Electric Power Plant Sources in Your Region
            </summary>
            <param name="Results"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.GetAnalysisResults.GetLEEDPotential(EnergyAnalysisForDynamo.DataContracts.RunResultSummary)">
            <summary>
            Gets LEED Section
            </summary>
            <param name="Results"></param>
            <returns></returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.GetAnalysisResults.GetEnergyModelFiles(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Download gbXML, inp or idf files from Green Building Studio
            </summary>
            <param name="RunId"> Input Run ID</param>
            <param name="ParametricRunId"> Input ID for one of the parametric runs. Default is set to 0</param>
            <param name="resulttype"> Result type gbxml or doe2 or inp </param>
            <param name="FilePath"> Set File location to download the file </param>
            <returns name="report"> string. </returns>
        </member>
        <member name="F:EnergyAnalysisForDynamo.SingleSignOnManager.singleSignOnAssembly">
            <summary>
                A reference to the the SSONET assembly to prevent reloading.
            </summary>
        </member>
        <member name="M:EnergyAnalysisForDynamo.SingleSignOnManager.LoadSSONet">
            <summary>
                Delay loading of the SSONet.dll
            </summary>
            <returns>The SSONet assembly</returns>
        </member>
        <member name="M:EnergyAnalysisForDynamo.SingleSignOnManager.RegisterSingleSignOn">
            <summary>
                Callback for registering an authentication provider with the package manager
            </summary>
            <param name="client">The client, to which the provider will be attached</param>
        </member>
    </members>
</doc>
